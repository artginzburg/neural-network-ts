{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/sigmoid.js","webpack:///./src/connection.js","webpack:///./src/neuron.js","webpack:///./src/uid.js","webpack:///./src/layer.js","webpack:///./src/network.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","sigmoid","z","Math","exp","Connection","from","to","_classCallCheck","this","weight","random","change","id","w","val","Neuron","neuron_classCallCheck","inputConnections","outputConnections","bias","delta","output","error","replace","toString","map","toJSON","floor","connection","push","Layer","numberOfNeurons","layer_classCallCheck","neurons","j","neuron","Network","numberOfLayers","network_classCallCheck","layers","length","index","layer","forEach","setBias","getRandomBias","learningRate","momentum","iterations","connectLayers","thisLayer","prevLayer","neuronInThisLayer","addOutputConnection","addInputConnection","input","activate","runInputSigmoid","calculateDeltasSigmoid","adjustWeights","setIterations","values","setOutput","connectionsValue","reduce","prev","conn","target","currentLayer","currentNeuron","k","currentConnection","setError","setDelta","setChange","setWeight","__webpack_exports__"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function sigmoid(z) {\n  return 1 / (1 + Math.exp(-z));\n}\n\nexport default sigmoid","class Connection {\n  constructor(from, to) {\n    this.from = from\n    this.to = to\n    this.weight = Math.random()\n    this.change = 0\n  }\n\n  toJSON() {\n    return {\n      change: this.change,\n      weight: this.weight,\n      from: this.from.id,\n      to: this.to.id\n    }\n  }\n\n  setWeight(w) {\n    this.weight = w\n  }\n\n  setChange(val) {\n    this.change = val\n  }\n}\n\nexport default Connection","\nimport uid from './uid'\nclass Neuron {\n  constructor() {\n    this.inputConnections = []\n    this.outputConnections = []\n    this.bias = 0\n    // delta is used to store a percentage of change in the weight\n    this.delta = 0\n    this.output = 0\n    this.error = 0\n    this.id = uid()\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      delta: this.delta,\n      output: this.output,\n      error: this.error,\n      bias: this.bias,\n      inputConnections: this.inputConnections.map(i => i.toJSON()),\n      outputConnections: this.outputConnections.map(i => i.toJSON())\n    }\n  }\n\n  getRandomBias() {\n    const min = -3;\n    const max = 3\n    return Math.floor(Math.random() * (+max - +min)) +min; \n  }\n\n  addInputConnection(connection) {\n    this.inputConnections.push(connection)\n  }\n\n  addOutputConnection(connection) {\n    this.outputConnections.push(connection)\n  }\n\n  setBias(val) {\n    this.bias = val\n  }\n\n  setOutput(val) {\n    this.output = val\n  }\n\n  setDelta(val) {\n    this.delta = val\n  }\n\n  setError(val) {\n    this.error = val\n  }\n}\n\nexport default Neuron","export default function uid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}","import Neuron from './neuron'\n\nclass Layer {\n  constructor(numberOfNeurons) {\n    const neurons = []\n    for (var j = 0; j < numberOfNeurons; j++) {\n      // const value = Math.random()\n      const neuron = new Neuron()\n  \n      // Neurons in other than initial layer have a bias value\n      \n      neurons.push(neuron)\n    }\n    \n    this.neurons = neurons\n  }\n\n  toJSON() {\n    return this.neurons.map(n => {\n      return n.toJSON()\n    })\n  }\n}\n\nexport default Layer","import sigmoid from './sigmoid'\nimport Connection from './connection'\nimport Layer from './layer'\n\nclass Network {\n  constructor(numberOfLayers) {\n    this.layers = numberOfLayers.map((length, index) => {\n      const layer = new Layer(length) \n      if (index !== 0 ) {\n        layer.neurons.forEach(neuron => {\n          neuron.setBias(neuron.getRandomBias())\n        })\n      }\n      return layer\n    })\n    this.learningRate = 0.3  // multiply's against the input and the delta then adds to momentum\n    this.momentum =  0.1       // multiply's against the specified \"change\" then adds to learning rate for change\n    this.iterations = 0\n    this.connectLayers()\n  }\n\n  toJSON() {\n    return {\n      learningRate: this.learningRate,\n      iterations: this.iterations,\n      layers: this.layers.map(l => l.toJSON())\n    }\n  }\n\n  setLearningRate(value) {\n    this.learningRate = value\n  }\n\n  setIterations(val) {\n    this.iterations = val\n  }\n\n  connectLayers() {\n    for (var layer = 1; layer < this.layers.length; layer++) {\n      const thisLayer = this.layers[layer]\n      const prevLayer = this.layers[layer - 1]\n      for (var neuron = 0; neuron < prevLayer.neurons.length; neuron++) {\n        for(var neuronInThisLayer = 0; neuronInThisLayer < thisLayer.neurons.length; neuronInThisLayer++) {\n          const connection = new Connection(prevLayer.neurons[neuron], thisLayer.neurons[neuronInThisLayer])\n          prevLayer.neurons[neuron].addOutputConnection(connection)\n          thisLayer.neurons[neuronInThisLayer].addInputConnection(connection)\n        }\n      }\n    }\n  }\n\n  // When training we will run this set of functions each time\n  train(input, output) {\n    this.activate(input)\n\n    // Forward propagate\n    this.runInputSigmoid()\n\n    // backpropagate\n    this.calculateDeltasSigmoid(output)\n    this.adjustWeights()\n    // console.log(this.layers.map(l => l.toJSON()))\n    this.setIterations(this.iterations + 1)\n  }\n\n  activate(values) {\n    this.layers[0].neurons.forEach((n, i) => {\n      n.setOutput(values[i])\n    })\n  }\n\n  run() {\n    // For now we only use sigmoid function\n    this.runInputSigmoid()\n  }\n\n  runInputSigmoid() {\n    for (var layer = 1; layer < this.layers.length; layer++) {\n      for (var neuron = 0; neuron < this.layers[layer].neurons.length; neuron++) {\n        const bias = this.layers[layer].neurons[neuron].bias\n        // For each neuron in this layer we compute its output value\n\n        const connectionsValue = this.layers[layer].neurons[neuron].inputConnections.reduce((prev, conn)  => {\n          const val = conn.weight * conn.from.output\n          return prev + val\n        }, 0) \n\n        this.layers[layer].neurons[neuron].setOutput(sigmoid(bias + connectionsValue))\n      }\n    }\n\n    return this.layers[this.layers.length - 1].neurons.map(n => n.output)\n  }\n\n  calculateDeltasSigmoid(target) {\n    for (let layer = this.layers.length - 1; layer >= 0; layer--) {\n      const currentLayer = this.layers[layer]\n\n      for (let neuron = 0; neuron < currentLayer.neurons.length; neuron++) {\n        const currentNeuron = currentLayer.neurons[neuron]\n        let output = currentNeuron.output;\n\n        let error = 0;\n        if (layer === this.layers.length -1 ) {\n          // Is output layer\n          error = target[neuron] - output;\n          // console.log('calculate delta, error, last layer', error)\n        }\n        else {\n          // Other than output layer\n          for (let k = 0; k < currentNeuron.outputConnections.length; k++) {\n            const currentConnection = currentNeuron.outputConnections[k]\n            error += currentConnection.to.delta * currentConnection.weight\n            // console.log('calculate delta, error, inner layer', error)\n          }\n\n\n        }\n        currentNeuron.setError(error)\n        currentNeuron.setDelta(error * output * (1 - output))\n      }\n    }\n  }\n\n  adjustWeights() {\n    \n    for (let layer = 1; layer <= this.layers.length -1; layer++) {\n      const prevLayer = this.layers[layer - 1]\n      const currentLayer = this.layers[layer]\n\n      for (let neuron = 0; neuron < currentLayer.neurons.length; neuron++) {\n         const currentNeuron = currentLayer.neurons[neuron]\n         let delta = currentNeuron.delta\n         \n        for (let i = 0; i < currentNeuron.inputConnections.length; i++) {\n          const currentConnection = currentNeuron.inputConnections[i]\n          let change = currentConnection.change\n         \n          change = (this.learningRate * delta * currentConnection.from.output)\n              + (this.momentum * change);\n          \n          currentConnection.setChange(change)\n          currentConnection.setWeight(currentConnection.weight + change)\n        }\n\n        currentNeuron.setBias(currentNeuron.bias + (this.learningRate * delta))\n       \n      }\n    }\n  }\n\n}\n\nexport default Network\n","import Network from './network'\nimport Layer from './layer'\nimport Neuron from './neuron'\nimport Connection from './connection'\n\nexport default {\n  Network,\n  Layer,\n  Neuron,\n  Connection\n}"],"sourceRoot":""}